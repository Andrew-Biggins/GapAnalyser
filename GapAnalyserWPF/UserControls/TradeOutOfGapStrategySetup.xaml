<UserControl x:Class="GapAnalyserWPF.UserControls.TradeOutOfGapStrategySetup"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:GapAnalyserWPF.UserControls" 
             xmlns:converters="clr-namespace:GapAnalyserWPF.Converters"
             mc:Ignorable="d"
             xmlns:strategyTesters="clr-namespace:GapAnalyser.StrategyTesters;assembly=GapAnalyser"
             xmlns:validationRules="clr-namespace:GapAnalyserWPF.ValidationRules"
             xmlns:system="clr-namespace:System;assembly=System.Runtime"
             xmlns:helpers="clr-namespace:GapAnalyserWPF.Helpers"
             d:DataContext="{d:DesignInstance {x:Type strategyTesters:OutOfGapStrategyTester}}"
             d:DesignHeight="95" d:DesignWidth="470">

    <UserControl.Resources>
        <ControlTemplate x:Key="ValidationErrorTemplate">
            <DockPanel>
                <StackPanel Orientation="Horizontal" DockPanel.Dock="Bottom" HorizontalAlignment="Center" Margin="0,2">
                    <Grid Width="12" Height="12">
                        <Ellipse Width="12" Height="12" Fill="Red" HorizontalAlignment="Center" 
                                 VerticalAlignment="Center" />
                        <TextBlock Foreground="White" FontWeight="Heavy" 
                                   FontSize="8" HorizontalAlignment="Center" 
                                   VerticalAlignment="Center" TextAlignment="Center"
                                   ToolTip="{Binding ElementName=ErrorAdorner, Path=AdornedElement.(Validation.Errors)/ErrorContent}">X</TextBlock>
                    </Grid>
                </StackPanel>
                <AdornedElementPlaceholder x:Name="ErrorAdorner" />
            </DockPanel>
        </ControlTemplate>

        <Style TargetType="TextBox">
            <Setter Property="Height" Value="20" />
            <Setter Property="Width" Value="40" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
        </Style>
    </UserControl.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="203"/>
            <ColumnDefinition Width="60"/>
            <ColumnDefinition Width="207"/>
        </Grid.ColumnDefinitions>

        <Border BorderBrush="Black" BorderThickness="1" Margin="0,0,5,0">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="20" />
                    <RowDefinition Height="20" />
                    <RowDefinition Height="15" />
                    <RowDefinition Height="45" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="90"/>
                    <ColumnDefinition Width="60"/>
                    <ColumnDefinition Width="53"/>
                </Grid.ColumnDefinitions>

                <TextBlock Grid.Column="0" Grid.Row="0" Text="Entry" Grid.ColumnSpan="3"
                       HorizontalAlignment="Center" TextWrapping="Wrap"/>

                <StackPanel Orientation="Horizontal" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="3" Margin="5,0,5,0">
                    <RadioButton HorizontalAlignment="Left" Margin="0,0,5,0" 
                             VerticalAlignment="Top" IsChecked="{Binding FibEntry}">
                        <RadioButton.Content>
                            <TextBlock Text="Fib Retrace" VerticalAlignment="Center" Margin="-5,0,0,0"/>
                        </RadioButton.Content>
                    </RadioButton>
                    <RadioButton HorizontalAlignment="Center"
                         VerticalAlignment="Top" IsChecked="{Binding FibEntry, Converter={converters:BoolToInverseNullableBoolConverter}}">
                        <RadioButton.Content>
                            <TextBlock Text="Points From Open" VerticalAlignment="Center" Margin="-5,0,0,0" />
                        </RadioButton.Content>
                    </RadioButton>
                </StackPanel>

                <TextBlock Grid.Column="0" Grid.Row="2" Text="Level" 
                       HorizontalAlignment="Center" VerticalAlignment="Bottom"/>
                <TextBlock Grid.Column="1" Grid.Row="2"
                       HorizontalAlignment="Center" VerticalAlignment="Bottom">
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding FibEntry}" Value="True">
                                    <Setter Property="Text" Value="+/- Points" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding FibEntry}" Value="False">
                                    <Setter Property="Text" Value="Points" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

                <ComboBox Grid.Row="3" Grid.Column="0" Width="60" Height="22" IsEnabled="{Binding FibEntry}"
                      SelectedIndex="{Binding FibLevelEntry, Converter={converters:IntegerToFibRetracementConverter}, Mode=TwoWay}"
                      SelectedItem="0" Margin="5,10,5,10" VerticalAlignment="Top">
                    <ComboBoxItem Content="5.9%" />
                    <ComboBoxItem Content="11.4%" />
                    <ComboBoxItem Content="23.6%" />
                    <ComboBoxItem Content="38.2%" />
                    <ComboBoxItem Content="50%" />
                    <ComboBoxItem Content="61.8%" />
                    <ComboBoxItem Content="78.6%" />
                    <ComboBoxItem Content="88.6%" />
                    <ComboBoxItem Content="94.1%" />
                </ComboBox>

                <TextBox HorizontalAlignment="Left" 
                     Margin="10" Grid.Row="3" Grid.Column="1" 
                     TextWrapping="Wrap" VerticalAlignment="Top" 
                     Validation.ErrorTemplate="{StaticResource ValidationErrorTemplate}"
                     helpers:HasErrorUtility.MvvmHasError="{Binding Path=EntryHasError}">
                    <TextBox.Resources>
                        <helpers:BindingProxy x:Key="SourceProxy" Data="{Binding FibEntry, Mode=TwoWay}" />
                        <helpers:BindingProxy x:Key="TargetProxy" Data="{Binding FibEntry}" />
                    </TextBox.Resources>
                    <TextBox.Text >
                        <Binding Path="PointsEntry"
                             Mode="TwoWay"
                            UpdateSourceTrigger="PropertyChanged"
                             Converter="{converters:EmptyDoubleToStringConverter}">
                            <Binding.ValidationRules>
                                <validationRules:PointsNumberValidationRule>
                                    <validationRules:PointsNumberValidationRule.CanBeNegative>
                                        <helpers:ValidationWrapper Data="{Binding Source={StaticResource SourceProxy}, Path=Data, Mode=OneWay}" BindingToTrigger="{Binding Data, Source={StaticResource TargetProxy}}"/>
                                    </validationRules:PointsNumberValidationRule.CanBeNegative>
                                </validationRules:PointsNumberValidationRule>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>
        </Border>

        <Border BorderBrush="Black" BorderThickness="1" Grid.Column="1" Margin="0,0,5,0">
            <StackPanel>
                <TextBlock Text="Stop" Margin="0,2,0,0"
                           HorizontalAlignment="Center"/>
                <TextBlock Text="Size (points)" 
                       HorizontalAlignment="Center" TextWrapping="Wrap" Margin="0,10,0,0"/>
                <TextBox Margin="5" Validation.ErrorTemplate="{StaticResource ValidationErrorTemplate}"
                         helpers:HasErrorUtility.MvvmHasError="{Binding Path=StopHasError}">
                    <TextBox.Text>
                        <Binding Path="Stop"
                             Mode="TwoWay"
                             UpdateSourceTrigger="PropertyChanged"
                             TargetNullValue="{x:Static system:String.Empty}"
                             Converter="{converters:EmptyDoubleToStringConverter}">
                            <Binding.ValidationRules>
                                <validationRules:PointsNumberValidationRule/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </StackPanel>
        </Border>

        <Border BorderBrush="Black" BorderThickness="1" 
                Grid.Column="2" Grid.Row="0">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="20" />
                    <RowDefinition Height="20" />
                    <RowDefinition Height="15" />
                    <RowDefinition Height="45" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="90"/>
                    <ColumnDefinition Width="60"/>
                    <ColumnDefinition Width="62"/>
                </Grid.ColumnDefinitions>

                <TextBlock Grid.Column="0" Grid.Row="0" Text="Target" Grid.ColumnSpan="3"
                           HorizontalAlignment="Center"/>

                <StackPanel Orientation="Horizontal" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="3" Margin="5,0,5,0">
                    <RadioButton HorizontalAlignment="Left" Margin="0,0,5,0" 
                                 VerticalAlignment="Top" IsChecked="{Binding FibTarget}">
                        <RadioButton.Content>
                            <TextBlock Text="Fib Extension" VerticalAlignment="Center" Margin="-5,0,0,0"/>
                        </RadioButton.Content>
                    </RadioButton>
                    <RadioButton HorizontalAlignment="Center"
                                 VerticalAlignment="Top" IsChecked="{Binding FibTarget, Converter={converters:BoolToInverseNullableBoolConverter}}">
                        <RadioButton.Content>
                            <TextBlock Text="Points From Entry" VerticalAlignment="Center" Margin="-5,0,0,0" />
                        </RadioButton.Content>
                    </RadioButton>
                </StackPanel>

                <TextBlock Grid.Column="0" Grid.Row="2" Text="Level" VerticalAlignment="Bottom" 
                           HorizontalAlignment="Center"/>
                <TextBlock Grid.Column="1" Grid.Row="2" VerticalAlignment="Bottom"
                           HorizontalAlignment="Center">
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding FibTarget}" Value="True">
                                    <Setter Property="Text" Value="+/- Points" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding FibTarget}" Value="False">
                                    <Setter Property="Text" Value="Points" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
                <ComboBox Grid.Row="3" Grid.Column="0" Width="70" Height="22" IsEnabled="{Binding FibTarget}"
                  SelectedIndex="{Binding FibLevelTarget, Converter={converters:IntegerToFibExtensionConverter}, Mode=TwoWay}"
                  SelectedItem="0" Margin="5,10,5,10" VerticalAlignment="Top">
                    <ComboBoxItem Content="127.1%" />
                    <ComboBoxItem Content="141.4%" />
                    <ComboBoxItem Content="161.8%" />
                    <ComboBoxItem Content="200%" />
                    <ComboBoxItem Content="227.1%" />
                    <ComboBoxItem Content="241.4%" />
                    <ComboBoxItem Content="268.1%" />
                    <ComboBoxItem Content="300%" />
                    <ComboBoxItem Content="361.8%" />
                </ComboBox>

                <TextBox HorizontalAlignment="Left" 
                     Margin="10" Grid.Row="3" Grid.Column="1" 
                     TextWrapping="Wrap" VerticalAlignment="Top"
                     Validation.ErrorTemplate="{StaticResource ValidationErrorTemplate}"
                     helpers:HasErrorUtility.MvvmHasError="{Binding Path=TargetHasError}">
                    <TextBox.Resources>
                        <helpers:BindingProxy x:Key="SourceProxy" Data="{Binding FibTarget, Mode=TwoWay}" />
                        <helpers:BindingProxy x:Key="TargetProxy" Data="{Binding FibTarget}" />
                    </TextBox.Resources>
                    <TextBox.Text>
                        <Binding Path="PointsTarget"
                             Mode="TwoWay"
                             UpdateSourceTrigger="PropertyChanged"
                             Converter="{converters:EmptyDoubleToStringConverter}">
                            <Binding.ValidationRules>
                                <validationRules:PointsNumberValidationRule>
                                    <validationRules:PointsNumberValidationRule.CanBeNegative>
                                        <helpers:ValidationWrapper Data="{Binding Source={StaticResource SourceProxy}, Path=Data, Mode=OneWay}" BindingToTrigger="{Binding Data, Source={StaticResource TargetProxy}}"/>
                                    </validationRules:PointsNumberValidationRule.CanBeNegative>
                                </validationRules:PointsNumberValidationRule>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>
        </Border>
    </Grid>
</UserControl>
